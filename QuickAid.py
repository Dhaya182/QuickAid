# -*- coding: utf-8 -*-
"""miniproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XJtEeFQonZpyCqfwuuWVOHrIiAKI2dt5
"""

import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
from tqdm import tqdm
import tensorflow as tf
import time
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.models import Model

#gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.33)
#sess=tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))

!cp '/content/drive/MyDrive/kaggle.json' '/content'

import zipfile
import os

os.environ['KAGGLE_CONFIG_DIR'] = "/content"

!kaggle datasets download -d yasinpratomo/wound-dataset

data= zipfile.ZipFile('wound-dataset.zip', 'r') 
data.extractall()

DATADIR = "/content/Wound_dataset"

CATEGORIES = ["Abrasions","Bruises",
              "Burns","Cut","Ingrown_nails",
              "Laceration","Stab_wound"
              ]

for category in CATEGORIES:  
    path = os.path.join(DATADIR,category) 
    for img in os.listdir(path):  
        img_array = cv2.imread(os.path.join(path,img),3)  
        plt.imshow(img_array) 
        plt.show() 

        break 
    break

print(img_array)

print(img_array.shape)

print(len(img_array))

IMG_SIZE = 200
new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))
plt.imshow(new_array)
plt.show()

new_array

print(new_array.shape)

training_data = []

def create_training_data():
    for category in CATEGORIES:  

        path = os.path.join(DATADIR,category) 
        class_num = CATEGORIES.index(category)  
        for img in os.listdir(path):
            
          try:

            img_array = cv2.imread(os.path.join(path,img))  
            new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  
            training_data.append([new_array, class_num])  
          
                
          except OSError as e:
            print("OSErrroBad img most likely", e, os.path.join(path,img))
          except Exception as e:
            print("general exception", e, os.path.join(path,img))

create_training_data()

print(len(training_data))

import random

random.shuffle(training_data)

for sample in training_data[:10]:
    print(sample[1])

X = []
y = []

for features,label in training_data:
    X.append(features)
    y.append(label)

print(X[0].reshape(-1, IMG_SIZE, IMG_SIZE, 3))

X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 3)

x_train = np.array(X)
y_train = np.array(y)

import pickle

pickle_out = open("X.pickle","wb")
pickle.dump(x_train, pickle_out)
pickle_out.close()

pickle_out = open("y.pickle","wb")
pickle.dump(y_train, pickle_out)
pickle_out.close()

#pickle_in = open("X.pickle","rb")
#x_train= pickle.load(pickle_in)

#pickle_in = open("y.pickle","rb")
#y_train = pickle.load(pickle_in)

#x_train = np.expand_dims(x_train, -1)
#x_tes= np.expand_dims(x_test, -1)
print(x_train.shape)

K = len(set(y_train))
print("number of classes:", K)

shape=x_train[0].shape
shape

#i = shape
#x = Conv2D(32, (3, 3), strides=2, activation='relu')
#x = Conv2D(64, (3, 3), strides=2, activation='relu')
#x = Conv2D(128, (3, 3), strides=2, activation='relu')
#x = Flatten()
#x = Dropout(0.2)
#x = Dense(512, activation='relu')
#x = Dropout(0.2)
#x = Dense(K, activation='softmax')

#model = Model(i, x)

from tensorflow.keras.callbacks import TensorBoard
NAME = "QuickAid-CNN"
tensorboard = TensorBoard(log_dir="logs/{}".format(NAME))

'''dense_layers = [0,1,2]
 layer_sizes = [32, 64, 128]
 conv_layers = [1, 2, 3]

 for dense_layer in dense_layers:
     for layer_size in layer_sizes:
         for conv_layer in conv_layers:
             NAME = "{}-conv-{}-nodes-{}-dense-{}".format(conv_layer, layer_size, dense_layer, int(time.time()))
             print(NAME)
             x_train = x_train/255.0

             model = Sequential()

             model.add(Conv2D(256, (3, 3), input_shape=x_train.shape[1:]))
             model.add(Activation('relu'))
             model.add(MaxPooling2D(pool_size=(2, 2)))

             model.add(Conv2D(256, (3, 3)))
             model.add(Activation('relu'))
             model.add(MaxPooling2D(pool_size=(2, 2)))

             model.add(Flatten())  

             model.add(Dense(64))

             model.add(Dense(7))
             model.add(Activation('sigmoid'))

             model.compile(loss='sparse_categorical_crossentropy',
                           optimizer='adam',
                           metrics=['accuracy'])

             #r=model.fit(x_train, y_train, batch_size=32, epochs = 10)
             r=model.fit(x_train, y_train, batch_size=32, epochs = 30,callbacks=[tensorboard])'''

x_train = x_train/255.0

model = Sequential()

model.add(Conv2D(256, (3, 3), input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(256, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())  

model.add(Dense(64))

model.add(Dense(7))
model.add(Activation('sigmoid'))

model.compile(loss='sparse_categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

#r=model.fit(x_train, y_train, batch_size=32, epochs = 10)
r=model.fit(x_train, y_train, batch_size=32, epochs = 30,callbacks=[tensorboard])

#pickle.dump(r, open('model.pkl', 'wb'))

!mkdir -p saved_model
model.save('quickaid.h5')

#pickled_model = pickle.load(open('model.pkl', 'rb'))
#pickled_model.predict(X_test)

test_data = []

def create_test_data():
    for category in CATEGORIES:  

        path = os.path.join(DATADIR,category) 
        class_num = CATEGORIES.index(category)  
        for img in os.listdir(path):
            
          try:

            img_array = cv2.imread(os.path.join(path,img)) 
            new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE)) 
            test_data.append([new_array, class_num])  
          
                
          except OSError as e:
            print("OSErrroBad img most likely", e, os.path.join(path,img))
          except Exception as e:
            print("general exception", e, os.path.join(path,img))

create_test_data()

import random

random.shuffle(test_data)

print(len(test_data))

for sample in test_data[:10]:
    print(sample[1])
test_data1 = []
a=0
class_num = CATEGORIES.index(category)
for i in test_data[:50]:
  test_data1.append([test_data,class_num])
 # a=a+1

print(len(test_data1))

random.shuffle(test_data1)
for sample in test_data1[:10]:
  print(sample[1])

x_test = []
y_test = []

for features,label in test_data:
    x_test.append(features)
    y_test.append(label)

print(x_test[0].reshape(-1, IMG_SIZE, IMG_SIZE, 3))

x_test= np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 3)

#gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=0.33)
#sess=tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))

import time
from tensorflow.keras.callbacks import TensorBoard

NAME = "QuickAid-{}".format(int(time.time()))

tensorboard = TensorBoard(log_dir="logs/{}".format(NAME))



x_test = x_test/255.0

prediction = model.predict(x_test)

#from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions

print(prediction)

y_test1 = model.predict(x_test)

for i in x_test[:3]:
 print( (y_test1))

#score = r.score(x_train,y_train)

def prepare(filepath):
    IMG_SIZE = 200 
    img_array = cv2.imread(filepath)  
    new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  
    return new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 3)  
    #return new_array.reshape(-1)



img="/content/Wound_dataset/Burns/burns (15).jpg"

pre = model.predict([prepare(img)])
#pre = model.predict(img)

pre

pre_1= pre.astype('i')
pre_2 = pre_1.flatten()
pre_2

#predictions1 = {'intercept': LM.intercept_, 'coefficient': LM.coef_,   'predicted_value': predicted_values, 'accuracy' : score}

#prdictions_1={"Abrasions":r.Abrasions,"Bruises":r.Bruises,"Burns":r.Burns,"Cut":r.Cut,"Ingrown_nails":r.Ingrown_nails,"Laceration":r.Laceration,"Stab_wound":r.Stab_wound}

a=[]
for i in range(len(pre_2)):
  #max=pre[0][0]
  if(pre_2[i]==1):
    a.append(i)

  #print(pre[i])
   
a

for i in range(len(a)):
  print(CATEGORIES[a[i]])

#print(CATEGORIES[int(pre[0][0])])



